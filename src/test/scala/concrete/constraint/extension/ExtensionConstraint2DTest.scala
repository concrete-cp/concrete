package concrete.constraint.extension;

import org.scalatest.FlatSpec
import concrete.IntDomain
import concrete.Problem
import concrete.ProblemState
import concrete.Variable
import concrete.constraint.AdviseCount
import concrete.generator.ExtensionGenerator
import org.scalatest.Inspectors
import concrete.generator.ProblemGenerator
import mdd.MDD

final class ExtensionConstraint2DTest extends FlatSpec with Inspectors {

  val var1 = new Variable("V1", IntDomain(1 to 3))
  val var2 = new Variable("V2", IntDomain(1 to 4))

  val matrix2d = new Matrix2D(3, 4, 1, 1, false);
  matrix2d.set(Array(1, 1), true);
  matrix2d.set(Array(1, 3), true);

  val c = BinaryExt(Array(var1, var2), matrix2d)

  val ps = Problem(var1, var2).initState.toState

  "ExtensionConstraint2D" should "find supports" in {
    val bv1 = ps.dom(var2).toBitVector(matrix2d.offsets(1))
    assert(c.hasSupport(0, 1, bv1))
    assert(!c.hasSupport(0, 2, bv1))
    assert(!c.hasSupport(0, 3, bv1))

    val bv0 = ps.dom(var1).toBitVector(matrix2d.offsets(0))
    assert(c.hasSupport(1, 1, bv0))
    assert(!c.hasSupport(1, 2, bv0))
    assert(c.hasSupport(1, 3, bv0))
    assert(!c.hasSupport(1, 4, bv0))
  }

  it should "check correctly" in {
    assert(!c.check(Array(1, 2)))
    assert(c.check(Array(1, 1)))
  }

  it should "filter correctly" in {
    val v8 = new Variable("V8", IntDomain(0 to 16))
    val v16 = new Variable("V16", IntDomain(0 to 16))

    val ps = Problem(v8, v16)
      .initState
      .filterDom(v8)(v => Set(0, 2, 9, 15).contains(v))
      .filterDom(v16)(v => Set(5, 7, 8).contains(v))
      .asInstanceOf[ProblemState]

    val ac = new AdviseCount

    val nogoods2 = "0 2|0 5|0 11|0 16|1 1|1 10|1 12|1 13|1 14|2 1|2 3|2 5|2 9|2 11|2 12|2 16|3 4|3 8|3 12|4 1|4 2|4 4|4 5|4 7|5 0|5 4|5 5|5 14|5 16|6 6|6 11|7 2|7 6|7 13|7 14|7 15|8 6|8 7|8 8|8 13|9 0|9 5|9 6|9 10|10 0|10 1|10 2|10 8|10 10|10 11|11 10|12 5|12 7|12 8|12 13|12 15|13 1|13 11|14 0|14 2|14 9|14 11|14 12|15 2|15 4|15 5|15 6|15 7|15 10|16 1|16 10|16 11"
      .split("\\|").map(_.split(" ").map(_.toInt).toSeq)

    val matrix2 = new Matrix2D(17, 17, 0, 0, true)
    matrix2.setAll(nogoods2, false)
    val c2 = new BinaryExtNR(Array(v8, v16), matrix2)

    c2.register(ac)
    c2.adviseAll(ps)

    val mod = c2.revise(ps).asInstanceOf[ProblemState]

    c2.adviseAll(mod)
    c2.revise(mod)
    //    c.advise(domains, 0)
    //    println(c.revise(mod, Unit))

  }

  it should "also filter correctly" in {
    val v0 = new Variable("V0", IntDomain(0 to 133))
    val v7 = new Variable("V7", IntDomain(0 to 133))

    val tuples = "0 102|0 103|0 104|0 105|0 106|0 107|0 108|0 109|0 110|0 111|0 112|0 113|0 114|0 115|0 116|0 117|0 118|0 119|0 120|0 121|0 122|0 123|0 124|0 125|0 126|1 0|1 1|1 2|1 3|1 4|1 5|1 6|1 7|1 8|1 9|1 10|1 11|1 12|1 13|1 14|1 15|1 16|1 17|1 18|1 19|1 20|1 21|1 22|1 23|1 24|1 25|1 26|1 27|1 28|1 29|1 30|1 31|1 32|1 33|1 34|1 35|1 36|2 37|2 38|2 39|2 40|2 41|2 42|2 43|2 44|2 45|2 46|2 47|2 48|2 49|2 50|2 51|2 52|2 53|2 54|3 58|3 59|4 60|4 61|4 62|5 60|5 61|5 62|6 74|6 75|6 76|6 77|6 78|6 79|6 80|6 81|6 82|6 83|6 84|6 85|6 86|6 87|6 88|6 89|7 102|7 103|7 104|7 105|7 106|7 107|7 108|7 109|7 110|7 111|7 112|7 113|7 114|7 115|7 116|7 117|7 118|7 119|7 120|7 121|7 122|7 123|7 124|7 125|7 126|8 102|8 103|8 104|8 105|8 106|8 107|8 108|8 109|8 110|8 111|8 112|8 113|8 114|8 115|8 116|8 117|8 118|8 119|8 120|8 121|8 122|8 123|8 124|8 125|8 126|9 0|9 1|9 2|9 3|9 4|9 5|9 6|9 7|9 8|9 9|9 10|9 11|9 12|9 13|9 14|9 15|9 16|9 17|9 18|9 19|9 20|9 21|9 22|9 23|9 24|9 25|9 26|9 27|9 28|9 29|9 30|9 31|9 32|9 33|9 34|9 35|9 36|10 0|10 1|10 2|10 3|10 4|10 5|10 6|10 7|10 8|10 9|10 10|10 11|10 12|10 13|10 14|10 15|10 16|10 17|10 18|10 19|10 20|10 21|10 22|10 23|10 24|10 25|10 26|10 27|10 28|10 29|10 30|10 31|10 32|10 33|10 34|10 35|10 36|11 0|11 1|11 2|11 3|11 4|11 5|11 6|11 7|11 8|11 9|11 10|11 11|11 12|11 13|11 14|11 15|11 16|11 17|11 18|11 19|11 20|11 21|11 22|11 23|11 24|11 25|11 26|11 27|11 28|11 29|11 30|11 31|11 32|11 33|11 34|11 35|11 36|12 90|12 91|12 92|12 93|12 94|12 95|12 96|12 97|12 98|12 99|12 100|12 101|13 58|13 59|15 0|15 1|15 2|15 3|15 4|15 5|15 6|15 7|15 8|15 9|15 10|15 11|15 12|15 13|15 14|15 15|15 16|15 17|15 18|15 19|15 20|15 21|15 22|15 23|15 24|15 25|15 26|15 27|15 28|15 29|15 30|15 31|15 32|15 33|15 34|15 35|15 36|16 0|16 1|16 2|16 3|16 4|16 5|16 6|16 7|16 8|16 9|16 10|16 11|16 12|16 13|16 14|16 15|16 16|16 17|16 18|16 19|16 20|16 21|16 22|16 23|16 24|16 25|16 26|16 27|16 28|16 29|16 30|16 31|16 32|16 33|16 34|16 35|16 36|17 37|17 38|17 39|17 40|17 41|17 42|17 43|17 44|17 45|17 46|17 47|17 48|17 49|17 50|17 51|17 52|17 53|17 54|18 66|18 67|18 68|19 90|19 91|19 92|19 93|19 94|19 95|19 96|19 97|19 98|19 99|19 100|19 101|22 0|22 1|22 2|22 3|22 4|22 5|22 6|22 7|22 8|22 9|22 10|22 11|22 12|22 13|22 14|22 15|22 16|22 17|22 18|22 19|22 20|22 21|22 22|22 23|22 24|22 25|22 26|22 27|22 28|22 29|22 30|22 31|22 32|22 33|22 34|22 35|22 36|23 60|23 61|23 62|24 60|24 61|24 62|26 0|26 1|26 2|26 3|26 4|26 5|26 6|26 7|26 8|26 9|26 10|26 11|26 12|26 13|26 14|26 15|26 16|26 17|26 18|26 19|26 20|26 21|26 22|26 23|26 24|26 25|26 26|26 27|26 28|26 29|26 30|26 31|26 32|26 33|26 34|26 35|26 36|27 0|27 1|27 2|27 3|27 4|27 5|27 6|27 7|27 8|27 9|27 10|27 11|27 12|27 13|27 14|27 15|27 16|27 17|27 18|27 19|27 20|27 21|27 22|27 23|27 24|27 25|27 26|27 27|27 28|27 29|27 30|27 31|27 32|27 33|27 34|27 35|27 36|28 0|28 1|28 2|28 3|28 4|28 5|28 6|28 7|28 8|28 9|28 10|28 11|28 12|28 13|28 14|28 15|28 16|28 17|28 18|28 19|28 20|28 21|28 22|28 23|28 24|28 25|28 26|28 27|28 28|28 29|28 30|28 31|28 32|28 33|28 34|28 35|28 36|29 0|29 1|29 2|29 3|29 4|29 5|29 6|29 7|29 8|29 9|29 10|29 11|29 12|29 13|29 14|29 15|29 16|29 17|29 18|29 19|29 20|29 21|29 22|29 23|29 24|29 25|29 26|29 27|29 28|29 29|29 30|29 31|29 32|29 33|29 34|29 35|29 36|30 58|30 59|31 60|31 61|31 62|32 60|32 61|32 62|33 60|33 61|33 62|34 90|34 91|34 92|34 93|34 94|34 95|34 96|34 97|34 98|34 99|34 100|34 101|36 0|36 1|36 2|36 3|36 4|36 5|36 6|36 7|36 8|36 9|36 10|36 11|36 12|36 13|36 14|36 15|36 16|36 17|36 18|36 19|36 20|36 21|36 22|36 23|36 24|36 25|36 26|36 27|36 28|36 29|36 30|36 31|36 32|36 33|36 34|36 35|36 36|37 55|37 56|37 57|38 58|38 59|39 133|41 74|41 75|41 76|41 77|41 78|41 79|41 80|41 81|41 82|41 83|41 84|41 85|41 86|41 87|41 88|41 89|42 133|43 90|43 91|43 92|43 93|43 94|43 95|43 96|43 97|43 98|43 99|43 100|43 101|44 127|44 128|44 129|44 130|44 131|44 132|45 0|45 1|45 2|45 3|45 4|45 5|45 6|45 7|45 8|45 9|45 10|45 11|45 12|45 13|45 14|45 15|45 16|45 17|45 18|45 19|45 20|45 21|45 22|45 23|45 24|45 25|45 26|45 27|45 28|45 29|45 30|45 31|45 32|45 33|45 34|45 35|45 36|46 0|46 1|46 2|46 3|46 4|46 5|46 6|46 7|46 8|46 9|46 10|46 11|46 12|46 13|46 14|46 15|46 16|46 17|46 18|46 19|46 20|46 21|46 22|46 23|46 24|46 25|46 26|46 27|46 28|46 29|46 30|46 31|46 32|46 33|46 34|46 35|46 36|47 0|47 1|47 2|47 3|47 4|47 5|47 6|47 7|47 8|47 9|47 10|47 11|47 12|47 13|47 14|47 15|47 16|47 17|47 18|47 19|47 20|47 21|47 22|47 23|47 24|47 25|47 26|47 27|47 28|47 29|47 30|47 31|47 32|47 33|47 34|47 35|47 36|48 0|48 1|48 2|48 3|48 4|48 5|48 6|48 7|48 8|48 9|48 10|48 11|48 12|48 13|48 14|48 15|48 16|48 17|48 18|48 19|48 20|48 21|48 22|48 23|48 24|48 25|48 26|48 27|48 28|48 29|48 30|48 31|48 32|48 33|48 34|48 35|48 36|49 60|49 61|49 62|50 60|50 61|50 62|51 60|51 61|51 62|52 90|52 91|52 92|52 93|52 94|52 95|52 96|52 97|52 98|52 99|52 100|52 101|53 90|53 91|53 92|53 93|53 94|53 95|53 96|53 97|53 98|53 99|53 100|53 101|54 102|54 103|54 104|54 105|54 106|54 107|54 108|54 109|54 110|54 111|54 112|54 113|54 114|54 115|54 116|54 117|54 118|54 119|54 120|54 121|54 122|54 123|54 124|54 125|54 126|55 63|55 64|55 65|56 63|56 64|56 65|57 90|57 91|57 92|57 93|57 94|57 95|57 96|57 97|57 98|57 99|57 100|57 101|58 69|58 70|58 71|58 72|58 73|59 74|59 75|59 76|59 77|59 78|59 79|59 80|59 81|59 82|59 83|59 84|59 85|59 86|59 87|59 88|59 89|60 60|60 61|60 62|61 0|61 1|61 2|61 3|61 4|61 5|61 6|61 7|61 8|61 9|61 10|61 11|61 12|61 13|61 14|61 15|61 16|61 17|61 18|61 19|61 20|61 21|61 22|61 23|61 24|61 25|61 26|61 27|61 28|61 29|61 30|61 31|61 32|61 33|61 34|61 35|61 36|62 102|62 103|62 104|62 105|62 106|62 107|62 108|62 109|62 110|62 111|62 112|62 113|62 114|62 115|62 116|62 117|62 118|62 119|62 120|62 121|62 122|62 123|62 124|62 125|62 126|63 63|63 64|63 65|64 60|64 61|64 62|65 0|65 1|65 2|65 3|65 4|65 5|65 6|65 7|65 8|65 9|65 10|65 11|65 12|65 13|65 14|65 15|65 16|65 17|65 18|65 19|65 20|65 21|65 22|65 23|65 24|65 25|65 26|65 27|65 28|65 29|65 30|65 31|65 32|65 33|65 34|65 35|65 36|66 58|66 59|67 127|67 128|67 129|67 130|67 131|67 132|69 74|69 75|69 76|69 77|69 78|69 79|69 80|69 81|69 82|69 83|69 84|69 85|69 86|69 87|69 88|69 89|70 102|70 103|70 104|70 105|70 106|70 107|70 108|70 109|70 110|70 111|70 112|70 113|70 114|70 115|70 116|70 117|70 118|70 119|70 120|70 121|70 122|70 123|70 124|70 125|70 126|71 102|71 103|71 104|71 105|71 106|71 107|71 108|71 109|71 110|71 111|71 112|71 113|71 114|71 115|71 116|71 117|71 118|71 119|71 120|71 121|71 122|71 123|71 124|71 125|71 126|72 133|73 74|73 75|73 76|73 77|73 78|73 79|73 80|73 81|73 82|73 83|73 84|73 85|73 86|73 87|73 88|73 89|74 69|74 70|74 71|74 72|74 73|75 74|75 75|75 76|75 77|75 78|75 79|75 80|75 81|75 82|75 83|75 84|75 85|75 86|75 87|75 88|75 89|76 127|76 128|76 129|76 130|76 131|76 132|77 133|78 133|79 60|79 61|79 62|80 60|80 61|80 62|81 60|81 61|81 62|82 74|82 75|82 76|82 77|82 78|82 79|82 80|82 81|82 82|82 83|82 84|82 85|82 86|82 87|82 88|82 89|83 133|85 58|85 59|86 74|86 75|86 76|86 77|86 78|86 79|86 80|86 81|86 82|86 83|86 84|86 85|86 86|86 87|86 88|86 89|87 74|87 75|87 76|87 77|87 78|87 79|87 80|87 81|87 82|87 83|87 84|87 85|87 86|87 87|87 88|87 89|88 133|89 133|90 60|90 61|90 62|92 63|92 64|92 65|93 127|93 128|93 129|93 130|93 131|93 132|94 0|94 1|94 2|94 3|94 4|94 5|94 6|94 7|94 8|94 9|94 10|94 11|94 12|94 13|94 14|94 15|94 16|94 17|94 18|94 19|94 20|94 21|94 22|94 23|94 24|94 25|94 26|94 27|94 28|94 29|94 30|94 31|94 32|94 33|94 34|94 35|94 36|95 63|95 64|95 65|96 60|96 61|96 62|97 133|98 63|98 64|98 65|99 90|99 91|99 92|99 93|99 94|99 95|99 96|99 97|99 98|99 99|99 100|99 101|101 0|101 1|101 2|101 3|101 4|101 5|101 6|101 7|101 8|101 9|101 10|101 11|101 12|101 13|101 14|101 15|101 16|101 17|101 18|101 19|101 20|101 21|101 22|101 23|101 24|101 25|101 26|101 27|101 28|101 29|101 30|101 31|101 32|101 33|101 34|101 35|101 36|102 37|102 38|102 39|102 40|102 41|102 42|102 43|102 44|102 45|102 46|102 47|102 48|102 49|102 50|102 51|102 52|102 53|102 54|103 55|103 56|103 57|104 69|104 70|104 71|104 72|104 73|105 74|105 75|105 76|105 77|105 78|105 79|105 80|105 81|105 82|105 83|105 84|105 85|105 86|105 87|105 88|105 89|106 127|106 128|106 129|106 130|106 131|106 132|107 133|108 133|109 37|109 38|109 39|109 40|109 41|109 42|109 43|109 44|109 45|109 46|109 47|109 48|109 49|109 50|109 51|109 52|109 53|109 54|110 37|110 38|110 39|110 40|110 41|110 42|110 43|110 44|110 45|110 46|110 47|110 48|110 49|110 50|110 51|110 52|110 53|110 54|111 55|111 56|111 57|112 58|112 59|115 74|115 75|115 76|115 77|115 78|115 79|115 80|115 81|115 82|115 83|115 84|115 85|115 86|115 87|115 88|115 89|116 74|116 75|116 76|116 77|116 78|116 79|116 80|116 81|116 82|116 83|116 84|116 85|116 86|116 87|116 88|116 89|118 102|118 103|118 104|118 105|118 106|118 107|118 108|118 109|118 110|118 111|118 112|118 113|118 114|118 115|118 116|118 117|118 118|118 119|118 120|118 121|118 122|118 123|118 124|118 125|118 126|119 102|119 103|119 104|119 105|119 106|119 107|119 108|119 109|119 110|119 111|119 112|119 113|119 114|119 115|119 116|119 117|119 118|119 119|119 120|119 121|119 122|119 123|119 124|119 125|119 126|120 133|121 0|121 1|121 2|121 3|121 4|121 5|121 6|121 7|121 8|121 9|121 10|121 11|121 12|121 13|121 14|121 15|121 16|121 17|121 18|121 19|121 20|121 21|121 22|121 23|121 24|121 25|121 26|121 27|121 28|121 29|121 30|121 31|121 32|121 33|121 34|121 35|121 36|122 37|122 38|122 39|122 40|122 41|122 42|122 43|122 44|122 45|122 46|122 47|122 48|122 49|122 50|122 51|122 52|122 53|122 54|123 58|123 59|125 133|126 58|126 59|127 66|127 67|127 68|128 66|128 67|128 68|129 74|129 75|129 76|129 77|129 78|129 79|129 80|129 81|129 82|129 83|129 84|129 85|129 86|129 87|129 88|129 89|131 60|131 61|131 62|133 133"

    val cspomRel = MDD.fromSeq(
      tuples.split("\\|").map(_.split(" ").map(_.toInt)))
    
    val pg = new ProblemGenerator()
    val gen = pg.gm.known('extension).asInstanceOf[ExtensionGenerator]
    val relation = gen.generateMatrix(Seq(v0, v7), cspomRel, false)

    val constraint = new BinaryExtNR(Array(v0, v7), relation.asInstanceOf[Matrix2D])
    constraint.register(new AdviseCount())
    val problem = Problem(v0, v7)
    problem.addConstraint(constraint)
    val a = 102
    val ps = problem.initState.assign(v7, a).toState

    constraint.adviseAll(ps)
    val mod = constraint.revise(ps)
    //println(mod.dom(v0))
    forAll(mod.dom(v0).view) { v => assert(cspomRel.contains(Array(v, a))) }

  }

}
